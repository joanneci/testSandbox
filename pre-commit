#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

check_line_lengths() {
  # Enforce maximum line length to 80 characters
  too_long=$(git diff-index --cached -p $against -- ${file} |
           egrep '^\+.{121,}' | sed -E 's/^\+//')
  test -z "$too_long" || echo "The line:
------------------------------------------------------------------------------
  '$too_long'
------------------------------------------------------------------------------
  in file '$file' is longer than 120 characters.
  It is required to have no more than 80 characters per line.
"
}

diffs=$(git diff-index --cached $against -- |
      sed -n '/^:[^:]/ {s/^://;p;}')
#Exclude git submodules, if any
diffs_normal=$(echo "$diffs" | grep -v '^...... 120000')
bad=$(
test -n "$diffs_normal" && echo "$diffs_normal" |
while read src_mode dst_mode src_obj dst_obj status file; do
  if test "$src_mode" != "$dst_mode" -a "$dst_mode" != "000000"; then
    check_mode
  fi
  if test "$dst_mode" != "160000" -a "$dst_mode" != '000000'; then
    check_size
    #Exclude some files from line lengths check
    #check_line_lengths_extension_to_exclude="^(ui|xml|xml\\.in|mrml|html)$"
    if [[ ! ${file#*.} =~ $check_line_lengths_extension_to_exclude ]]; then
      check_line_lengths
    fi
  fi
done
)
test -z "$bad" || printErrorAndExit "$bad"